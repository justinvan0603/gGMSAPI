<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChatBot</name>
    </assembly>
    <members>
        <member name="M:ChatBot.Infrastructure.Core.Extensions.AddPagination(Microsoft.AspNetCore.Http.HttpResponse,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extension method to add pagination info to Response headers
            </summary>
            <param name="response"></param>
            <param name="currentPage"></param>
            <param name="itemsPerPage"></param>
            <param name="totalItems"></param>
            <param name="totalPages"></param>
        </member>
        <member name="M:ChatBot.Infrastructure.Mappings.PropertyCopy.Copy``2(``0,``1)">
            <summary>
            Copies all public, readable properties from the source object to the
            target. The target type does not have to have a parameterless constructor,
            as no new instance needs to be created.
            </summary>
            <remarks>Only the properties of the source and target types themselves
            are taken into account, regardless of the actual types of the arguments.</remarks>
            <typeparam name="TSource">Type of the source</typeparam>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="source">Source to copy properties from</param>
            <param name="target">Target to copy properties to</param>
        </member>
        <member name="T:ChatBot.Infrastructure.Mappings.PropertyCopy`1">
            <summary>
            Generic class which copies to its target type from a source
            type specified in the Copy method. The types are specified
            separately to take advantage of type inference on generic
            method arguments.
            </summary>
        </member>
        <member name="M:ChatBot.Infrastructure.Mappings.PropertyCopy`1.CopyFrom``1(``0)">
            <summary>
            Copies all readable properties from the source to a new instance
            of TTarget.
            </summary>
        </member>
        <member name="T:ChatBot.Infrastructure.Mappings.PropertyCopier`2">
            <summary>
            Static class to efficiently store the compiled delegate which can
            do the copying. We need a bit of work to ensure that exceptions are
            appropriately propagated, as the exception is generated at type initialization
            time, but we wish it to be thrown as an ArgumentException.
            Note that this type we do not have a constructor constraint on TTarget, because
            we only use the constructor when we use the form which creates a new instance.
            </summary>
        </member>
        <member name="F:ChatBot.Infrastructure.Mappings.PropertyCopier`2.creator">
            <summary>
            Delegate to create a new instance of the target type given an instance of the
            source type. This is a single delegate from an expression tree.
            </summary>
        </member>
        <member name="F:ChatBot.Infrastructure.Mappings.PropertyCopier`2.sourceProperties">
            <summary>
            List of properties to grab values from. The corresponding targetProperties 
            list contains the same properties in the target type. Unfortunately we can't
            use expression trees to do this, because we basically need a sequence of statements.
            We could build a DynamicMethod, but that's significantly more work :) Please mail
            me if you really need this...
            </summary>
        </member>
    </members>
</doc>
